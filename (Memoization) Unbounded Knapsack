int f(int ind,int tar,vector<int> &profit,vector<int> &weight,vector<vector<int>> &dp)
{
    if(ind == 0){
        return (tar/weight[ind])*profit[ind];
    }
    if(dp[ind][tar]!=-1) return dp[ind][tar];
    int notTake = f(ind-1,tar,profit,weight,dp);
    int take=0;
    if(weight[ind]<=tar)
        take = profit[ind] + f(ind,tar-weight[ind],profit,weight,dp);
    
    return dp[ind][tar]= max(take,notTake);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>> dp(n, vector<int> (w+1,-1));
    return f(n-1,w,profit,weight,dp);
}

