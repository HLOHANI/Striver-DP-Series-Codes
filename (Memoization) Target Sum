int f(int ind,int tar,vector<int>& arr,vector<vector<int>> &dp)
{
	if(ind == 0)
	{
		if(arr[0]==0 && tar == 0) return 2;
		
		if(tar==0 || arr[0]==tar) return 1;
		
		return 0;
	}
	if(dp[ind][tar]!=-1) return dp[ind][tar];
	int notPick = f(ind-1,tar,arr,dp);
	int pick = 0;
	if(tar >= arr[ind])
		pick = f(ind-1,tar-arr[ind],arr,dp);
	
	return dp[ind][tar]=pick+notPick;
}
int targetSum(int n, int target, vector<int>& arr) {
    // Write your code here.
	int totsum = 0;
	for(auto &it: arr) totsum += it;
	if(!(totsum-target >= 0 && (totsum - target)%2 == 0))
		return 0;
	int tar = (totsum-target)/2;
	vector<vector<int>> dp(n,vector<int> (tar+1,-1));
	return f(n-1,tar,arr,dp);
}

