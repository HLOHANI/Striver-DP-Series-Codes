int f(int i,vector<int> &num, int tar,vector<vector<int>> &dp)
{
	if(tar == 0) return 1;
	if(i == 0) return num[i]==tar;
	if(dp[i][tar]!=-1) return dp[i][tar];
	int notPick = f(i-1,num,tar,dp);
	int pick=0;
	if(num[i]<=tar) pick = f(i-1,num,tar-num[i],dp);
	
	return dp[i][tar]=pick+notPick;
}
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
	int size = num.size();
	vector<vector<int>> dp(size ,vector<int> (tar+1,-1));
	return f(size-1,num,tar,dp);
}
